<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-16
 * Time: 09:24 PM
 * Auto-generated by "generate.php"
 * @package Sherlock\components\queries
 */
namespace Sherlock\components\queries;

use Sherlock\components;

/**
 * @method \Sherlock\components\queries\DisMax tie_breaker() tie_breaker(\float $value) Default: 0.5
 * @method \Sherlock\components\queries\DisMax boost() boost(\float $value) Default: 2
 */
class DisMax extends \Sherlock\components\BaseComponent implements \Sherlock\components\QueryInterface
{
    public function __construct($hashMap = null)
    {
        $this->params['queries'] = null;
        $this->params['tie_breaker'] = 0.5;
        $this->params['boost'] = 2;

        parent::__construct($hashMap);
    }

    /**
     * @param  \Sherlock\components\QueryInterface | array $queries,... - one or more Queries can be specified individually, or an array of filters
     * @return DisMax
     */
    public function queries($queries)
    {

        $args = func_get_args();
        \Analog\Analog::log("DisMax->Queries(".print_r($args, true).")", \Analog\Analog::DEBUG);

        //single param, array of filters
        if (count($args) == 1 && is_array($args[0]))
            $args = $args[0];

        foreach ($args as $arg) {
            if ($arg instanceof \Sherlock\components\QueryInterface)
                $this->params['queries'][] = $arg->toArray();
        }

        return $this;
    }

    public function toArray()
    {
        $ret = array (
  			'dis_max' =>
				array (
					'tie_breaker' => $this->params["tie_breaker"],
					'boost' => $this->params["boost"],
					'queries' => $this->params['queries'],
  				),
		);

        return $ret;
    }

}
