<?php
/**
 * User: zach
 * Date: 3/22/13
 * Time: 9:00 AM
 */

namespace Sherlock\tests;

use \Sherlock\Sherlock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-07 at 03:12:53.
 */
class IndexOperationsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Sherlock\sherlock
     */
    protected $object;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Sherlock(
            array(
                "hosts" => array(
                    "localhost:9200"
                )
            )
        );
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }


    public function assertThrowsException($exception_name, $code)
    {
        $e = null;
        try {
            $code();
        } catch (\Exception $e) {
            // No more code, we only want to catch the exception in $e
        }

        $this->assertInstanceOf($exception_name, $e);
    }


    public function testCreateDelete()
    {
        $sherlock = $this->object;

        $index = $sherlock->index('testindexoperations');

        $response = $index->create();

        $this->assertEquals(true, $response["acknowledged"]);

        $response = $index->delete();
        $this->assertEquals(true, $response["acknowledged"]);

    }

    public function testUpdateSettings()
    {
        $sherlock = $this->object;

        $index = $sherlock->index('testindexoperations');

        $response = $index->create();

        $this->assertEquals(true, $response["acknowledged"]);

        $response = $index->settings(array(
            "number_of_replicas" => 4
        ))->updateSettings();

        $this->assertEquals(true, $response["acknowledged"]);

        $response = $index->delete();
        $this->assertEquals(true, $response["acknowledged"]);

    }

    public function testUpdateMappings()
    {
        $sherlock = $this->object;

        $index = $sherlock->index('testindexoperations');

        $response = $index->create();
        $this->assertEquals(true, $response["acknowledged"]);

        $mapping = Sherlock::mappingBuilder("testtype")->String()->field("name");
        $response = $index->mappings($mapping)->type("testtype")->updateMapping();

        $this->assertEquals(true, $response["acknowledged"]);

        $response = $index->delete();
        $this->assertEquals(true, $response["acknowledged"]);

    }

}
